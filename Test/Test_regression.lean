import Auto.Tactic

set_option auto.prep.redMode "reducible"
set_option trace.auto.lamReif.printResult true
set_option trace.auto.lamReif.printValuation true

-- Tactic elaboration

example : True := by auto d[]
example : True := by auto u[]
example : True := by auto [] u[] d[]
example : True := by first | auto üëç | exact True.intro

-- Defeq Lemma collection

section CollectLemma

  set_option auto.prep.redMode "instance" in
  example : (‚àÄ (xs ys zs : List Œ±), xs ++ ys ++ zs = xs ++ (ys ++ zs)) := by
    intro xs; induction xs <;> auto [*] d[List.append]

  set_option auto.prep.redMode "instance" in
  example : (‚àÄ (m n k : Nat), m + n + k = m + (n + k)) := by
    intros m n k; revert m n; induction k <;> auto [*] d[Nat.add]

end CollectLemma

-- Constant unfolding

section UnfoldConst

  def c‚ÇÅ := 2
  def c‚ÇÇ := c‚ÇÅ

  example : c‚ÇÅ = 2 := by auto u[c‚ÇÅ]
  example : c‚ÇÇ = 2 := by
    try auto u[c‚ÇÅ, c‚ÇÇ];
    auto u[c‚ÇÇ, c‚ÇÅ]
  example : c‚ÇÇ = 2 := by auto u[c‚ÇÅ] d[c‚ÇÇ]
  example : c‚ÇÇ = 2 := by auto u[c‚ÇÇ] d[c‚ÇÅ]
  example (h : c‚ÇÉ = c‚ÇÅ) : c‚ÇÉ = 2 := by auto [h] u[c‚ÇÅ]
  example : let c := 2; c = 2 := by
    try auto u[c];
    auto
  set_option trace.auto.printLemmas true
  example : True := by auto d[Nat.rec]

  -- Brute force example
  -- This must be fixed
  set_option auto.prep.redMode "instance" in
  set_option trace.auto.lamReif.printResult true in
  set_option trace.auto.lamReif.printValuation true in
  example : (‚àÄ (m n k : Nat), m + n + k = m + (n + k)) := by
    intros m n k; revert m n; induction k
    case zero => auto u[Nat.add] d[Nat.rec]

end UnfoldConst

-- First Order

example : True := by
  auto [True.intro];

example (a b : Prop) : a ‚à® b ‚à® ¬¨ a := by
  auto

example (a b : Nat) (f : Nat ‚Üí Nat)
 (eqNat : Nat ‚Üí Nat ‚Üí Prop) (H : eqNat (f a) (f b)) : True := by
  auto [H]

example {Œ± Œ≤ : Type} (a : Œ±) (b : Œ≤) (H : b = b) : a = a := by
  auto [H]

example (a : Nat) (f : Nat ‚Üí Nat) (H : ‚àÄ x, f x = x) :
  f x = f (f (f (f (f (f (f (f (f x)))))))) := by
  auto [H]

example (x y : Nat) (f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá f‚Çà f‚Çâ f‚ÇÅ‚ÇÄ f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÅ‚ÇÉ f‚ÇÅ‚ÇÑ : Nat ‚Üí Nat ‚Üí Nat)
  (H : ‚àÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ x‚ÇÖ x‚ÇÜ x‚Çá x‚Çà,
    f‚ÇÅ (f‚ÇÇ (f‚ÇÉ x‚ÇÅ x‚ÇÇ) (f‚ÇÑ x‚ÇÉ x‚ÇÑ)) (f‚ÇÖ (f‚ÇÜ x‚ÇÖ x‚ÇÜ) (f‚Çá x‚Çá x‚Çà)) =
    f‚Çà (f‚Çâ (f‚ÇÅ‚ÇÄ x‚Çà x‚Çá) (f‚ÇÅ‚ÇÅ x‚ÇÜ x‚ÇÖ)) (f‚ÇÅ‚ÇÇ (f‚ÇÅ‚ÇÉ x‚ÇÑ x‚ÇÉ) (f‚ÇÅ‚ÇÑ x‚ÇÇ x‚ÇÅ))) :
  True := by
  auto [H]

-- Higher Order

example (H : (fun x : Nat => x) = (fun x => x)) : True := by
  auto [H]

example (H : (fun (x y z t : Nat) => x) = (fun x y z t => x)) : True := by
  auto [H]

example
  {Œ± : Sort u}
  (add : ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (Hadd : ‚àÄ x y f n, add x y f n = (x f) ((y f) n))
  (mul : ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (Hmul : ‚àÄ x y f, mul x y f = x (y f))
  (w‚ÇÅ w‚ÇÇ : ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (Hw‚ÇÅ‚ÇÇ : (w‚ÇÅ = w‚ÇÇ) = (w‚ÇÇ = w‚ÇÅ)) : True := by 
  auto [Hadd, Hmul, Hw‚ÇÅ‚ÇÇ]

-- Polymorphic Constant

set_option auto.prep.redMode "instances" in
example (as bs cs ds : List Œ≤) : (as ++ bs) ++ (cs ++ ds) = as ++ (bs ++ (cs ++ ds)) := by
  auto [List.append_assoc]

set_option auto.prep.redMode "instances" in
example (as bs cs : List Œ±) (f : Œ± ‚Üí Œ≤) :
  ((as ++ bs) ++ cs).map f = as.map f ++ (bs.map f ++ cs.map f) := by
  auto [List.append_assoc, List.map_append]

example (as bs cs ds : List Œ≤) : (as ++ bs) ++ (cs ++ ds) = as ++ (bs ++ (cs ++ ds)) := by
  auto [List.append_assoc]

example (as bs cs : List Œ±) (f : Œ± ‚Üí Œ≤) :
  ((as ++ bs) ++ cs).map f = as.map f ++ (bs.map f ++ cs.map f) := by
  auto [List.append_assoc, List.map_append]

-- Polymorphic free variable

example
  (ap : ‚àÄ {Œ± : Type v}, List Œ± ‚Üí List Œ± ‚Üí List Œ±)
  (ap_assoc : ‚àÄ (Œ± : Type v) (as bs cs : List Œ±), ap (ap as bs) cs = ap as (ap bs cs)) :
  ap (ap as bs) (ap cs ds) = ap as (ap bs (ap cs ds)) := by
  auto [ap_assoc]

example
  (hap : ‚àÄ {Œ± Œ≤ Œ≥ : Type u} [self : HAppend Œ± Œ≤ Œ≥], Œ± ‚Üí Œ≤ ‚Üí Œ≥)
  (ap_assoc : ‚àÄ (Œ± : Type u) (as bs cs : List Œ±),
    @hap (List Œ±) (List Œ±) (List Œ±) instHAppend (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend as bs) cs =
    @hap (List Œ±) (List Œ±) (List Œ±) instHAppend as (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend bs cs)) :
  @hap (List Œ±) (List Œ±) (List Œ±) instHAppend (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend as bs) (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend cs ds) = 
  @hap (List Œ±) (List Œ±) (List Œ±) instHAppend as (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend bs (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend cs ds)) := by
  auto [ap_assoc]

-- Metavariable

example (u : Œ±) (h : ‚àÄ (z : Œ±), x = z ‚àß z = y) : x = y := by
  have g : ‚àÄ z, x = z ‚àß z = y ‚Üí x = y := by
    intros z hlr; have ‚ü®hl, hr‚ü© := hlr; exact Eq.trans hl hr
  -- Notably, this example fails if we use "duper"
  apply g; auto [h]; exact u

example (Œ± : Type u) : True := by
  have g : (‚àÄ (ap : ‚àÄ {Œ± : Type u}, List Œ± ‚Üí List Œ± ‚Üí List Œ±)
    (ap_assoc_imp : (‚àÄ (as bs cs : List Œ±), ap (ap as bs) cs = ap as (ap bs cs)) ‚Üí
      (‚àÄ (as bs cs ds : List Œ±), ap (ap as bs) (ap cs ds) = ap as (ap bs (ap cs ds)))), True) := by
    intros; exact True.intro
  apply g;
  case ap_assoc_imp => intro hassoc; auto [hassoc]
  case ap => exact List.append

-- A head expression may have different dependent arguments under
--   different circumstances. This is first observed in `FunLike.coe`

section FluidDep

  variable (fundep : ‚àÄ {Œ± : Type u} (Œ≤ : Œ± ‚Üí Type) (a : Œ±), Œ≤ a)

  example (h : @fundep Œ± (fun _ => Nat) = fun (_ : Œ±) => x) :
    @fundep Œ± (fun _ => Nat) y = x := by
    auto [h]

end FluidDep